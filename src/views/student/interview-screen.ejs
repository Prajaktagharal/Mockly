<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Advanced Interview Platform (Audio Only)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap");

      body {
        font-family: "Inter", sans-serif;
        background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
      }

      .pulse-animation {
        animation: pulse 1.5s infinite;
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
          opacity: 1;
        }
        50% {
          transform: scale(1.1);
          opacity: 0.7;
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }

      .slide-in {
        animation: slideIn 0.5s ease-out forwards;
      }

      @keyframes slideIn {
        from {
          transform: translateY(20px);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }

      .fade-in {
        animation: fadeIn 0.8s ease-out forwards;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      /* Progress bar animation */
      .progress-value {
        transition: width 0.4s ease;
      }

      /* Improved scrollbar for the transcript */
      .custom-scrollbar::-webkit-scrollbar {
        width: 6px;
      }

      .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 10px;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
      }

      /* Loading spinner */
      .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top: 4px solid #3b82f6;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      /* Typing indicator animation */
      @keyframes typing {
        0% {
          opacity: 0.3;
        }
        50% {
          opacity: 1;
        }
        100% {
          opacity: 0.3;
        }
      }

      .typing-dot:nth-child(1) {
        animation: typing 1.4s infinite 0s;
      }
      .typing-dot:nth-child(2) {
        animation: typing 1.4s infinite 0.2s;
      }
      .typing-dot:nth-child(3) {
        animation: typing 1.4s infinite 0.4s;
      }

      /* Interviewer card when audio-only */
      .interviewer-card {
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      .interviewer-avatar {
        width: 84px;
        height: 84px;
        border-radius: 9999px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 32px;
      }
    </style>
  </head>
  <body class="min-h-screen flex flex-col">
    <!-- Loading overlay -->
    <div
      id="loadingOverlay"
      class="fixed inset-0 bg-black bg-opacity-70 z-50 flex flex-col items-center justify-center transition-opacity duration-300"
      style="display: flex"
    >
      <div
        class="text-center px-6 py-8 rounded-xl bg-white shadow-2xl transform transition-transform duration-500 scale-100"
      >
        <div class="flex flex-col items-center">
          <div class="mb-6">
            <svg
              class="w-16 h-16 text-blue-500"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"
              ></path>
            </svg>
          </div>
          <h2 class="text-2xl font-bold text-gray-800 mb-2">
            Preparing Your Interview
          </h2>
          <p class="text-gray-600 mb-6">
            Setting up your personalized interview experience...
          </p>

          <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
            <div
              id="loadingProgress"
              class="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style="width: 0%"
            ></div>
          </div>

          <p id="loadingMessage" class="text-sm text-gray-500">
            Initializing interview environment...
          </p>
        </div>
      </div>
    </div>

    <!-- Main content -->
    <div
      id="interviewContainer"
      class="container mx-auto px-4 py-8 max-w-7xl hidden"
    >
      <div class="mb-6">
        <div class="flex items-center justify-between">
          <h1 class="text-2xl font-bold text-gray-800">
            Technical Interview Session
          </h1>
          <div class="flex items-center space-x-2">
            <span id="progressText" class="text-gray-600 text-sm font-medium"
              >Question 1 of 5</span
            >
            <div class="w-48 bg-gray-200 rounded-full h-2">
              <div
                id="progressBar"
                class="bg-blue-600 h-2 rounded-full progress-value"
                style="width: 20%"
              ></div>
            </div>
          </div>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-5 gap-6">
        <!-- Left column (3/5) -->
        <div class="lg:col-span-3 space-y-6">
          <!-- Question card -->
          <div class="bg-white rounded-xl shadow-lg p-6 slide-in">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <div class="flex items-center mb-4">
                  <div
                    class="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-3"
                  >
                    <i class="fas fa-question text-blue-600"></i>
                  </div>
                  <h2 class="text-lg font-semibold text-gray-800">
                    Current Question
                  </h2>
                </div>
                <div
                  id="questionContainer"
                  class="text-gray-700 leading-relaxed py-2 border-l-4 border-blue-500 pl-4"
                >
                  Loading question...
                </div>
              </div>
              <!-- Question control button - single button that changes function -->
              <div class="flex space-x-2">
                <button
                  id="questionControlButton"
                  class="p-2 bg-gray-100 hover:bg-gray-200 rounded-full text-gray-600 transition-colors"
                  title="Stop Audio"
                >
                  <i class="fas fa-volume-mute"></i>
                </button>
              </div>
            </div>
          </div>

          <!-- Audio-only interviewer card and controls -->
          <div
            class="bg-white rounded-xl shadow-lg p-6 slide-in"
            style="animation-delay: 0.1s"
          >
            <div class="rounded-lg overflow-hidden relative bg-gray-900 p-6">
              <div class="interviewer-card text-white">
                <div class="interviewer-avatar bg-blue-600 text-white">
                  <i class="fas fa-user-tie"></i>
                </div>
                <div>
                  <div id="interviewerIndicator" class="text-lg font-semibold">
                    Live Interviewer (Audio)
                  </div>
                  <div class="text-sm text-gray-300">Questions will be read aloud.</div>
                </div>
              </div>
            </div>

            <!-- Controls section -->
            <div class="flex items-center justify-center space-x-4 mt-6">
              <!-- Mic button (shown by default) -->
              <button
                id="micButton"
                class="flex items-center justify-center w-14 h-14 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all focus:outline-none"
              >
                <i class="fas fa-microphone text-lg"></i>
              </button>

              <!-- Stop button (hidden by default) -->
              <button
                id="stopSpeakingButton"
                class="flex items-center justify-center w-14 h-14 bg-red-600 text-white rounded-full shadow-lg hover:bg-red-700 transition-all focus:outline-none"
                style="display: none"
              >
                <i class="fas fa-microphone-slash text-lg"></i>
              </button>

              <!-- Next button (always visible) -->
              <button
                id="nextButton"
                class="flex items-center justify-center w-14 h-14 bg-green-600 text-white rounded-full shadow-lg hover:bg-green-700 transition-all focus:outline-none"
              >
                <i class="fas fa-arrow-right text-lg"></i>
              </button>
            </div>

            <!-- Status indicators -->
            <div class="flex justify-center mt-3">
              <div
                id="recordingIndicator"
                class="bg-red-500 bg-opacity-80 text-white text-xs px-3 py-1 rounded-full hidden items-center"
              >
                <div
                  class="w-2 h-2 bg-red-100 rounded-full pulse-animation mr-1"
                ></div>
                <span>REC</span>
              </div>

              <div
                id="listeningText"
                class="hidden items-center text-sm font-medium text-blue-600 ml-4"
              >
                <span class="mr-2">Listening</span>
                <div class="flex space-x-1">
                  <div
                    class="typing-dot w-1.5 h-1.5 bg-blue-600 rounded-full"
                  ></div>
                  <div
                    class="typing-dot w-1.5 h-1.5 bg-blue-600 rounded-full"
                  ></div>
                  <div
                    class="typing-dot w-1.5 h-1.5 bg-blue-600 rounded-full"
                  ></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Right column (2/5) -->
        <div class="lg:col-span-2">
          <div
            class="bg-white rounded-xl shadow-lg p-6 h-full slide-in"
            style="animation-delay: 0.2s"
          >
            <div class="flex items-center mb-4">
              <div
                class="w-10 h-10 rounded-full bg-green-100 flex items-center justify-center mr-3"
              >
                <i class="fas fa-comment-alt text-green-600"></i>
              </div>
              <h2 class="text-lg font-semibold text-gray-800">Your Response</h2>
            </div>

            <!-- Transcript area -->
            <div class="relative h-[calc(100%-4rem)]">
              <textarea
                id="answer"
                class="w-full h-full px-4 py-3 border border-gray-300 focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50 rounded-lg resize-none custom-scrollbar"
                placeholder="Your answer will appear here as you speak..."
                disabled
              ></textarea>

              <!-- Word/character counter -->
              <div class="absolute bottom-3 right-3 text-xs text-gray-500">
                <span id="wordCount">0</span> words
              </div>

              <div class="absolute bottom-3 left-3 text-xs">
                <button
                  id="editButton"
                  class="flex items-center space-x-1 text-amber-600 hover:text-amber-700 transition-colors"
                >
                  <i class="fas fa-edit"></i>
                  <span>Edit</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Interview tips/feedback section -->
      <div
        class="mt-6 bg-white rounded-xl shadow-lg p-6 slide-in"
        style="animation-delay: 0.3s"
      >
        <div class="flex items-center mb-4">
          <div
            class="w-8 h-8 rounded-full bg-indigo-100 flex items-center justify-center mr-3"
          >
            <i class="fas fa-lightbulb text-indigo-600"></i>
          </div>
          <h3 class="text-base font-semibold text-gray-800">Interview Tips</h3>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="bg-indigo-50 rounded-lg p-3">
            <p class="text-sm text-gray-700">
              <span class="font-medium">Speak clearly:</span> Articulate
              technical terms carefully for better recognition.
            </p>
          </div>
          <div class="bg-indigo-50 rounded-lg p-3">
            <p class="text-sm text-gray-700">
              <span class="font-medium">Structure:</span> Use STAR method
              (Situation, Task, Action, Result) for responses.
            </p>
          </div>
          <div class="bg-indigo-50 rounded-lg p-3">
            <p class="text-sm text-gray-700">
              <span class="font-medium">Concise:</span> Keep answers focused and
              avoid going off-topic.
            </p>
          </div>
        </div>
      </div>
    </div>

<script>
  // Initialize variables
  const spaceId = "<%= spaceId %>"; // Passed from server
  const roundName = "<%= roundName %>"; // Passed from server
  let currentQuestionIndex = 0;
  let questions = [];
  let answers = {}; // Temporary storage for answers
  let recognition = null;
  let isRecording = false;
  let currentAnswer = ""; // Store current answer while speaking
  let currentUtterance = null; // Track current speech synthesis
  let recognitionPaused = false;

  // Technical terms dictionary to help with speech recognition
  const technicalTerms = {
    javascript: "JavaScript",
    python: "Python",
    java: "Java",
    react: "React",
    "node js": "Node.js",
    nodejs: "Node.js",
    sequel: "SQL",
    "my sequel": "MySQL",
    "post gress": "PostgreSQL",
    "mongo db": "MongoDB",
    docker: "Docker",
    kubernetes: "Kubernetes",
    kubernetes: "K8s",
    angler: "Angular",
    "view js": "Vue.js",
    lambda: "Lambda",
    "c sharp": "C#",
    "see sharp": "C#",
    rest: "REST",
    api: "API",
    apis: "APIs",
    json: "JSON",
    html: "HTML",
    css: "CSS",
    aws: "AWS",
    azure: "Azure",
    linux: "Linux",
    unix: "Unix",
    github: "GitHub",
    git: "Git",
    devops: "DevOps",
    "ci cd": "CI/CD",
    "front end": "frontend",
    "back end": "backend",
    "type script": "TypeScript",
  };

  // Show loading bar animation
  function animateLoading() {
    const loadingProgress = document.getElementById("loadingProgress");
    const loadingMessage = document.getElementById("loadingMessage");

    let progress = 0;
    const messages = [
      "Initializing interview environment...",
      "Preparing interview questions...",
      "Setting up voice recognition...",
      "Configuring audio connection...",
      "Almost ready...",
    ];

    const interval = setInterval(() => {
      progress += 5;
      loadingProgress.style.width = `${progress}%`;

      if (progress % 20 === 0) {
        const messageIndex = Math.floor(progress / 20) - 1;
        if (messageIndex < messages.length) {
          loadingMessage.textContent = messages[messageIndex];
        }
      }

      if (progress >= 100) {
        clearInterval(interval);
        setTimeout(() => {
          document.getElementById("loadingOverlay").style.opacity = "0";
          setTimeout(() => {
            document.getElementById("loadingOverlay").style.display =
              "none";
            document
              .getElementById("interviewContainer")
              .classList.remove("hidden");
            document
              .getElementById("interviewContainer")
              .classList.add("fade-in");
          }, 500);
        }, 500);
      }
    }, 50);
  }

  // Initialize interview
  async function initializeInterview() {
    animateLoading();

    try {
      const response = await fetch(`/generate-questions/${spaceId}/${roundName}`);
      const data = await response.json();
      questions = data.questions || [];

      // Safety fallback if questions missing
      if (!questions.length) {
        questions = [
          "Describe a technical project you worked on and the challenges you solved.",
          "Explain the difference between synchronous and asynchronous programming.",
          "How do you debug performance issues in a Node.js application?",
          "Describe how you would design a scalable REST API.",
          "What is your approach to testing and ensuring code quality?"
        ];
      }

      // Update progress indicator
      document.getElementById(
        "progressText"
      ).textContent = `Question 1 of ${questions.length}`;
      document.getElementById("progressBar").style.width = `${
        (1 / questions.length) * 100
      }%`;

      // Display first question once loading is complete
      setTimeout(() => {
        showQuestion(currentQuestionIndex);
      }, 2500);
    } catch (err) {
      console.error("Error initializing interview:", err);
      document.getElementById("loadingMessage").innerText =
        "Error loading questions. Please refresh and try again.";
    }
  }

  function showQuestion(index) {
    const questionContainer = document.getElementById('questionContainer');
    const micButton = document.getElementById('micButton');
    const questionControlButton = document.getElementById('questionControlButton');

    questionContainer.textContent = questions[index];
    questionContainer.classList.add('slide-in');

    // Update progress indicators
    document.getElementById('progressText').textContent = `Question ${index + 1} of ${questions.length}`;
    document.getElementById('progressBar').style.width = `${((index + 1) / questions.length) * 100}%`;

    // Stop any previous speech
    speechSynthesis.cancel();

    // Use Text-to-Speech with improved voice settings
    currentUtterance = new SpeechSynthesisUtterance(questions[index]);

    // Set up the question control button for "stop" mode
    questionControlButton.title = "Stop Audio";
    questionControlButton.innerHTML = '<i class="fas fa-volume-mute"></i>';
    questionControlButton.onclick = stopQuestionSpeaking;

    // Improve voice settings
    currentUtterance.rate = 0.9;
    currentUtterance.pitch = 1.1;

    // Try to get a better voice if available
    const voices = speechSynthesis.getVoices();
    const preferredVoices = [
      'Google UK English Male',
      'Microsoft Mark - English (United States)',
      'Alex',
      'Daniel'
    ];

    for (const preferredVoice of preferredVoices) {
      const voice = voices.find(v => v.name === preferredVoice);
      if (voice) {
        currentUtterance.voice = voice;
        break;
      }
    }

    // Add interviewer speaking animation
    document.getElementById('interviewerIndicator').classList.add('pulse-animation');

    // Disable buttons while speaking
    micButton.disabled = true;

    // When speech synthesis ends, enable the mic button and allow recording
    currentUtterance.onend = () => {
      micButton.disabled = false;
      document.getElementById('interviewerIndicator').classList.remove('pulse-animation');

      // Change question control button to replay mode
      questionControlButton.title = "Replay Question";
      questionControlButton.innerHTML = '<i class="fas fa-redo-alt"></i>';
      questionControlButton.onclick = replayQuestion;

      // Auto-start listening after question is spoken
      setTimeout(() => {
        // Show "Speak now" notification
        const notification = document.createElement('div');
        notification.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-4 py-2 rounded-full shadow-lg z-50 flex items-center fade-in';
        notification.innerHTML = '<i class="fas fa-microphone mr-2"></i> Speak now...';
        document.body.appendChild(notification);

        // Start listening automatically
        toggleSpeechRecognition();

        // Remove notification after 3 seconds
        setTimeout(() => {
          notification.classList.add('fade-out');
          setTimeout(() => notification.remove(), 500);
        }, 3000);
      }, 1000);
    };

    speechSynthesis.speak(currentUtterance);
  }

  function stopQuestionSpeaking() {
    const micButton = document.getElementById('micButton');
    const questionControlButton = document.getElementById('questionControlButton');

    // Stop speech synthesis
    speechSynthesis.cancel();
    document.getElementById('interviewerIndicator').classList.remove('pulse-animation');

    // Enable mic button
    micButton.disabled = false;

    // Change to replay button
    questionControlButton.title = "Replay Question";
    questionControlButton.innerHTML = '<i class="fas fa-redo-alt"></i>';
    questionControlButton.onclick = replayQuestion;
  }

  // Check for speech recognition support and initialize
  function checkSpeechRecognitionSupport() {
    // Check for WebkitSpeechRecognition support
    if (!("webkitSpeechRecognition" in window)) {
      alert(
        "Your browser does not support speech recognition. You can answer manually using the edit button."
      );
      document.getElementById("micButton").disabled = true;
    } else {
      recognition = new webkitSpeechRecognition();
      recognition.lang = "en-US";
      recognition.continuous = true;
      recognition.interimResults = true;

      recognition.onstart = () => {
        isRecording = true;
        currentAnswer = document.getElementById("answer").value || "";
        document.getElementById("micButton").disabled = true;
        document.getElementById("stopSpeakingButton").disabled = false;
        document
          .getElementById("recordingIndicator")
          .classList.remove("hidden");
        document.getElementById("recordingIndicator").classList.add("flex");
        document.getElementById("listeningText").classList.remove("hidden");
        document.getElementById("listeningText").classList.add("flex");
      };

      recognition.onresult = (event) => {
        let finalTranscript = currentAnswer;
        let interimTranscript = "";

        for (let i = event.resultIndex; i < event.results.length; i++) {
          const result = event.results[i];
          let transcript = result[0].transcript;

          // Apply technical term corrections
          for (const [incorrect, correct] of Object.entries(
            technicalTerms
          )) {
            const regex = new RegExp(`\\b${incorrect}\\b`, "gi");
            transcript = transcript.replace(regex, correct);
          }

          if (result.isFinal) {
            finalTranscript +=
              (finalTranscript ? " " : "") + transcript.trim();
          } else {
            interimTranscript += transcript;
          }
        }

        // Update the answer with final and interim results
        const answerElement = document.getElementById("answer");
        answerElement.value =
          finalTranscript +
          (interimTranscript ? ` ${interimTranscript}` : "");

        // Update word count
        updateWordCount(answerElement.value);

        // Update the current answer for continuity
        currentAnswer = finalTranscript;
      };

      recognition.onerror = (event) => {
        console.error("Speech recognition error:", event);

        if (event.error === "no-speech") {
          // Don't disable the mic button for no-speech errors
          return;
        }

        document.getElementById("micButton").disabled = false;
        document.getElementById("stopSpeakingButton").disabled = true;
        document
          .getElementById("recordingIndicator")
          .classList.add("hidden");
        document
          .getElementById("recordingIndicator")
          .classList.remove("flex");
        document.getElementById("listeningText").classList.add("hidden");
        document.getElementById("listeningText").classList.remove("flex");
      };

      recognition.onend = () => {
        if (!recognitionPaused) {
          isRecording = false;
          document.getElementById("micButton").disabled = false;
          document.getElementById("stopSpeakingButton").disabled = true;
          document
            .getElementById("recordingIndicator")
            .classList.add("hidden");
          document
            .getElementById("recordingIndicator")
            .classList.remove("flex");
          document.getElementById("listeningText").classList.add("hidden");
          document.getElementById("listeningText").classList.remove("flex");
        } else {
          // If paused (not a real end), restart recognition
          recognitionPaused = false;
          recognition.start();
        }
      };
    }
  }

  // Update word count display
  function updateWordCount(text) {
    const wordCount = text.trim() ? text.trim().split(/\s+/).length : 0;
    document.getElementById("wordCount").textContent = wordCount;
  }

  // Replay current question
  function replayQuestion() {
    showQuestion(currentQuestionIndex);
  }

  // Start speech recognition
  function toggleSpeechRecognition() {
    const micButton = document.getElementById('micButton');
    const stopSpeakingButton = document.getElementById('stopSpeakingButton');
    const nextButton = document.getElementById('nextButton');

    // Start recording
    currentAnswer = document.getElementById('answer').value || '';
    recognition.start();

    // Hide mic button, show only stop button
    micButton.style.display = 'none';
    stopSpeakingButton.style.display = 'flex';
    stopSpeakingButton.disabled = false;
    document.getElementById('editButton').style.display = 'none';
    nextButton.disabled = true;

    // Show recording indicators
    document.getElementById('recordingIndicator').classList.remove('hidden');
    document.getElementById('recordingIndicator').classList.add('flex');
    document.getElementById('listeningText').classList.remove('hidden');
    document.getElementById('listeningText').classList.add('flex');
  }

  function stopSpeaking() {
    const micButton = document.getElementById('micButton');
    const stopSpeakingButton = document.getElementById('stopSpeakingButton');
    const nextButton = document.getElementById('nextButton');
    const editButton = document.getElementById('editButton');

    if (recognition) {
      recognition.stop();
    }

    // Always show mic button and hide stop button when stopping
    micButton.style.display = 'flex';
    stopSpeakingButton.style.display = 'none';

    micButton.disabled = false;
    document.getElementById('answer').disabled = false;
    editButton.style.display = 'inline-block';
    nextButton.disabled = false;

    // Hide recording indicators
    document.getElementById('recordingIndicator').classList.add('hidden');
    document.getElementById('recordingIndicator').classList.remove('flex');
    document.getElementById('listeningText').classList.add('hidden');
    document.getElementById('listeningText').classList.remove('flex');
  }

  // Save the current answer and move to the next question
  function saveAnswerAndNext() {
    const question = questions[currentQuestionIndex];
    const answer = document.getElementById("answer").value;

    // Save the answer locally
    answers[question] = answer;

    // Proceed to the next question
    currentQuestionIndex++;

    // Check if there are more questions
    if (currentQuestionIndex < questions.length) {
      document.getElementById("answer").value = "";
      document.getElementById("wordCount").textContent = "0";

      // Show next question with a slide animation
      showQuestion(currentQuestionIndex);
    } else {
      finishInterview(); // All questions answered, finish interview
    }
  }

  // Enable editing mode for the answer
  function enableEditing() {
    const editButton = document.getElementById("editButton");
    const answerTextarea = document.getElementById("answer");
    answerTextarea.disabled = false;
    answerTextarea.focus();
    editButton.style.display = "none";
    document.getElementById("nextButton").disabled = false;
  }

  // Finish the interview and submit answers
  async function finishInterview() {
    // Stop recognition and synthesis
    if (recognition) recognition.abort();
    if (window.speechSynthesis) window.speechSynthesis.cancel();

    // Show completion overlay
    const loadingOverlay = document.getElementById("loadingOverlay");
    loadingOverlay.style.display = "flex";
    loadingOverlay.style.opacity = "1";

    document.getElementById("loadingProgress").style.width = "0%";
    document.getElementById("loadingMessage").textContent = "Processing your interview responses...";

    // Simulate progress animation
    let progress = 0;
    const interval = setInterval(() => {
      progress += 5;
      document.getElementById("loadingProgress").style.width = `${progress}%`;

      if (progress === 30) {
        document.getElementById("loadingMessage").textContent = "Analyzing your responses...";
      } else if (progress === 60) {
        document.getElementById("loadingMessage").textContent = "Finalizing your submission...";
      } else if (progress === 90) {
        document.getElementById("loadingMessage").textContent = "Almost done...";
      }

      if (progress >= 100) {
        clearInterval(interval);
        document.getElementById("loadingMessage").textContent = "Complete! Redirecting...";

        submitAnswers();
      }
    }, 50);
  }

  // Separate function to handle the server submission
  async function submitAnswers() {
    try {
      const response = await fetch(`/finish-round/${spaceId}/${roundName}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ answers }),
      });

      if (response.ok) {
        // Redirect to dashboard after successful submission
        window.location.href = '/dashboard';
      } else {
        // Show error message and options
        showSubmissionError('Server error occurred. Please try again.');
      }
    } catch (err) {
      console.error('Error finishing interview:', err);
      showSubmissionError('Network error. Please check your connection and try again.');
    }
  }

  // Function to handle submission errors
  function showSubmissionError(message) {
    // Hide loading animation
    document.getElementById("loadingProgress").style.width = "0%";
    document.getElementById("loadingMessage").textContent = message;

    // Add retry and dashboard buttons
    const loadingContainer = document.querySelector('#loadingOverlay > div');

    // Remove any existing buttons first
    loadingContainer.querySelectorAll('button').forEach(btn => btn.remove());

    // Add new buttons
    const buttonsDiv = document.createElement('div');
    buttonsDiv.className = 'flex space-x-4 mt-6';
    buttonsDiv.innerHTML = `
      <button class="px-6 py-2 bg-blue-600 text-white rounded-lg shadow-lg hover:bg-blue-700 transition-colors"
              onclick="submitAnswers()">
        Try Again
      </button>
      <button class="px-6 py-2 bg-gray-600 text-white rounded-lg shadow-lg hover:bg-gray-700 transition-colors"
              onclick="window.location.href='/dashboard'">
        Return to Dashboard
      </button>
    `;

    loadingContainer.appendChild(buttonsDiv);
  }

  // Add pause/resume functionality to handle longer speeches without timeouts
  function setupSpeechRecognitionRestarter() {
    // Chrome's speech recognition has a time limit, so we need to restart it
    setInterval(() => {
      if (isRecording && recognition) {
        recognitionPaused = true;
        recognition.stop(); // This will trigger onend, which will restart because recognitionPaused is true
      }
    }, 5000); // Restart every 5 seconds if still recording
  }

  // Improve accuracy for technical terms using context
  function setupAdditionalSpeechProcessor() {
    // This function applies advanced processing to the transcript for technical terms
    // In a real implementation, this could use a more sophisticated algorithm or ML model

    document
      .getElementById("answer")
      .addEventListener("input", function () {
        if (this.disabled) return; // Only process when user is editing

        let text = this.value;
        // Apply contextual processing for common technical term mistakes
        if (text.includes("function")) {
          text = text.replace(/funk shun/gi, "function");
          text = text.replace(/funk shin/gi, "function");
        }

        // Update word count when editing
        updateWordCount(text);
      });
  }

  // Event listeners
  document.addEventListener("DOMContentLoaded", () => {
    checkSpeechRecognitionSupport();
    initializeInterview();
    setupSpeechRecognitionRestarter();
    setupAdditionalSpeechProcessor();

    document
      .getElementById("micButton")
      .addEventListener("click", toggleSpeechRecognition);
    document
      .getElementById("stopSpeakingButton")
      .addEventListener("click", stopSpeaking);
    document
      .getElementById("nextButton")
      .addEventListener("click", saveAnswerAndNext);
    document
      .getElementById("editButton")
      .addEventListener("click", enableEditing);

    // Keyboard shortcuts
    document.addEventListener("keydown", (e) => {
      // Space key to toggle microphone (when not editing)
      if (
        e.code === "Space" &&
        !document.getElementById("answer").isFocused &&
        !document.getElementById("micButton").disabled
      ) {
        e.preventDefault();
        toggleSpeechRecognition();
      }

      // Escape key to stop speaking
      if (e.code === "Escape" && isRecording) {
        stopSpeaking();
      }
    });
  });
</script>
  </body>
</html>
